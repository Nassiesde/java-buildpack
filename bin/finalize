#!/usr/bin/env ruby
# frozen_string_literal: true

# Cloud Foundry Java Buildpack
# Copyright 2013-2018 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

$stdout.sync = true
$stderr.sync = true
$LOAD_PATH.unshift File.expand_path('../lib', __dir__)

puts "Installing Tesseract-OCR binaries"

build_dir = ARGV[0]

install_dir = File.join(build_dir,'vendor','tesseract')
install_dir_training_data = File.join(build_dir,'vendor')
tesseract_ocr_dir = File.join(Dir.home,'vendor','tesseract')
envscript=File.join(build_dir,'.profile.d','tesseract-ocr.sh')

require 'fileutils'
FileUtils.mkdir_p install_dir

#Dir.chdir app_dir

puts "***** download tesseract"

require 'open-uri'
open('tesseract-linux.tar.gz', 'wb') do |file|
  file << open('https://github.com/FlorianKoerner/compiled-tesseract/releases/download/3.5.1/tesseract-linux.tar.gz').read
end

puts build_dir
Dir.new(File.join(build_dir,'vendor')).each {|file| puts file }

puts "***** extract tesseract bin files"

require 'rubygems/package'
require 'zlib'

TAR_LONGLINK = '././@LongLink'
tar_gz_archive = 'tesseract-linux.tar.gz'
destination = File.join(build_dir,'vendor')

Gem::Package::TarReader.new( Zlib::GzipReader.open tar_gz_archive ) do |tar|
  dest = nil
  tar.each do |entry|
    if entry.full_name == TAR_LONGLINK
      dest = File.join destination, entry.read.strip
      next
    end
    dest ||= File.join destination, entry.full_name
    if entry.directory?
      FileUtils.rm_rf dest unless File.directory? dest
      FileUtils.mkdir_p dest, :mode => entry.header.mode, :verbose => false
    elsif entry.file?
      FileUtils.rm_rf dest unless File.file? dest
      File.open dest, "wb" do |f|
        f.print entry.read
      end
      FileUtils.chmod entry.header.mode, dest, :verbose => false
    elsif entry.header.typeflag == '2' #Symlink!
      File.symlink entry.header.linkname, dest
    end
    dest = nil
  end
end

puts app_dir
Dir.new(install_dir).each {|file| puts file }

puts 'download language files'

open(File.join(install_dir_training_data, 'ita.traineddata'), 'wb') do |file|
  file << open('https://github.com/tesseract-ocr/tessdata/raw/3.04.00/ita.traineddata').read
end

FileUtils.mkdir_p File.join(build_dir,'.profile.d')
File.write(envscript, 'export PATH=\"$TESSERACT_OCR_DIR/bin:\$PATH\"')
File.write(envscript, 'export LD_LIBRARY_PATH=\"$TESSERACT_OCR_DIR/lib:\$LD_LIBRARY_PATH\"', mode: 'a')
File.write(envscript, 'export TESSDATA_PREFIX=\"$TESSERACT_OCR_DIR/\"', mode: 'a')

puts 'Continue JAVA buildpack'

require 'java_buildpack/buildpack'

app_dir = ARGV[0]

JavaBuildpack::Buildpack.with_buildpack(app_dir, 'Finalize failed with exception %s', &:compile)

